name: Deploy lambda app through argonaut
"on":
    push:
        branches:
            - main
        tags:
            - ""
    workflow_dispatch: null
jobs:
    build:
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        runs-on: ubuntu-latest
        name: Build and push ecr image
        steps:
            - name: Fetch repo
              uses: actions/checkout@v2
            - name: Get the tag
              id: get_version
              if: startsWith(github.ref, 'refs/tags/')
              run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
            - name: Set the tag
              if: startsWith(github.ref, 'refs/tags/')
              run: echo "SHA_OR_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV
            - name: Get Short SHA
              id: get_sha
              if: startsWith(github.ref, 'refs/heads/')
              run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
            - name: Set the short sha
              if: startsWith(github.ref, 'refs/heads/')
              run: echo "SHA_OR_VERSION=${{ steps.get_sha.outputs.SHA_SHORT }}" >> $GITHUB_ENV
            - name: Login to ecr public
              run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Build Image
              id: build
              uses: docker/build-push-action@v2
              with:
                build-args: ""
                context: .
                file: lambda.Dockerfile
                outputs: type=docker,dest=image.tar
                push: "false"
                tags: 170982004044.dkr.ecr.us-east-2.amazonaws.com/bs-test:${{ env.SHA_OR_VERSION }}
            - name: Push to ecr
              id: push_to_ecr
              uses: argonautdev/aws-ecr-action@v4.1
              with:
                access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                account_id: ${{ secrets.AWS_ACCOUNT_ID }}
                create_repo: "true"
                docker_image_path: image.tar
                image_scanning_configuration: "true"
                region: us-east-2
                repo: argonaut/bs-test
                secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                tags: ${{ env.SHA_OR_VERSION }}
    deploy:
        needs:
            - build
        runs-on: ubuntu-latest
        name: Deploy lambda app
        steps:
            - name: Fetch repo
              uses: actions/checkout@v2
            - name: Get the tag
              id: get_version
              if: startsWith(github.ref, 'refs/tags/')
              run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
            - name: Set the tag
              if: startsWith(github.ref, 'refs/tags/')
              run: echo "SHA_OR_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV
            - name: Get Short SHA
              id: get_sha
              if: startsWith(github.ref, 'refs/heads/')
              run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
            - name: Set the short sha
              if: startsWith(github.ref, 'refs/heads/')
              run: echo "SHA_OR_VERSION=${{ steps.get_sha.outputs.SHA_SHORT }}" >> $GITHUB_ENV
            - name: Setup art cli
              run: |-
                curl --silent https://github.com/argonautdev/public/releases/latest/download/art-linux -L -o art
                chmod +x ./art
                sudo mv ./art /usr/local/bin/art
                art configure --key ${{ secrets.ART_KEY }} --secret ${{ secrets.ART_SECRET }}
                		
            - name: Deploy lambda app
              run: |-
                art app lambda deploy \
                	--name bs-test \
                	--image-uri 170982004044.dkr.ecr.us-east-2.amazonaws.com/argonaut/bs-test:${{ env.SHA_OR_VERSION }} \
                	--environment-name preprod
